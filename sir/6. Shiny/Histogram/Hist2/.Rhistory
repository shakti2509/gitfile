std <- sd(x, na.rm=T)
ll <- mu - 3*std
ul <- mu + 3*std
limits <- c(ll,ul)
limits
}
climits(lstDist$binomialDist)
mu <- mean(x, na.rm=T)
std <- sd(x, na.rm=T)
ll <- mu - 3*std
ul <- mu + 3*std
limits <- c(ll,ul)
limits
lapply(lstDist, climits)
str_dt <- "1994-10-04"
class(str_dt)
dt <- as.Date(str_dt)
class(dt)
dt
unclass(dt)
str_dt <- "1970-01-01"
class(str_dt)
dt <- as.Date(str_dt)
class(dt)
dt
unclass(dt)
str_dt <- "1970-01-02"
class(str_dt)
dt <- as.Date(str_dt)
class(dt)
dt
unclass(dt)
dt1 <- as.Date("2022-09-22")
dt2 <- as.Date("2021-10-03")
dt1-dt2
str_dt <- "1970-01-02"
class(str_dt)
dt <- as.Date(str_dt)
class(dt)
dt
unclass(dt)
dt1+7
dt1-dt2
f <- as.integer(dt1-dt2)
dt1+7
f
f <- dt1-dt2
f
class(f)
ft <- "15-Sep-2022"
as.Date(ft)
as.Date(ft,format = "%d-%b-%Y")
dt1
# 22, September 2022
format(dt1, "%d, %B %Y")
format(dt1,"%B")
format(dt1,"%m")
seq(dt1,length=10,by='week')
h <- "15-09-2022 09:35:14"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th
class(th)
unclass(th)
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 00:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 00:00:01"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
19800/60
19800/360
h <- "30-11-1970 00:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "30-11-1969 00:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-11-1970 00:10:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 00:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-02-1970 00:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 00:01:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 00:20:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 01:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 10:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 05:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
1800/360
h <- "01-01-1970 05:05:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 05:15:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 06:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
1800/360
h <- "01-01-1970 05:55:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
h <- "01-01-1970 06:00:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
1800/3600
h <- "01-01-1970 05:30:00"
th <- strptime(h,"%d-%m-%Y %H:%M:%S")
th <- as.POSIXct(th)
unclass(th)
library(tidyverse)
data("mtcars")
force(mtcars)
View(mtcars)
summarise(mtcars, mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T))
mtcars %>% summarise(mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T)
mtcars %>% summarise(mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T))
mtcars %>% summarise(mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T))
grp_mtcars <- group_by(mtcars, gear)
View(grp_mtcars)
summarise(grp_mtcars, mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T))
View(grp_mtcars)
class(mtcars)
class(grp_mtcars)
mtcars %>%
group_by(gear) %>%
summarise(mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T))
View(mtcars)
mtcars %>%
group_by(gear, am) %>%
summarise(mu_mpg=mean(mpg, na.rm=T), sd_mpg=sd(mpg, na.rm = T))
a <- c(34,89,10)
barplot(a)
barplot(a)
b <- c(20, 56, 89)
barplot(b)
ab <- rbind(a,b)
ab
barplot(ab)
barplot(ab, beside = T)
barplot(ab, beside = T, col=c('red','blue'))
colors()
barplot(ab, beside = T, col=c("skyblue", "tomato2"))
# Histogram
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 8)
hist(mtcars$mpg, breaks = 8)
barplot(a)
# Histogram
hist(mtcars$mpg)
data("mtcars")
View(mtcars)
plot(mtcars$drat, mtcars$mpg)
plot(mtcars$drat, mtcars$mpg, pch=17)
plot(mtcars$drat, mtcars$mpg, pch=17, col='tomato')
plot(mtcars$drat, mtcars$mpg, pch=17, col='tomato',
xlab = "Rear axle ratio", ylab = "Miles/(US) gallon")
data("mtcars")
library(ggplot2)
View(mtcars)
ggplot(data = mtcars, aes(x=disp, y=mpg))
ggplot(data = mtcars, aes(x=disp, y=mpg)) + geom_point()
ggplot(data = mtcars, aes(x=disp))
ggplot(data = mtcars, aes(x=disp)) + geom_histogram()
ggplot(data = mtcars, aes(x=disp)) + geom_histogram(bins = 10)
ggplot(data = mtcars, aes(x=disp)) + geom_histogram(bins = 10, color="blue")
ggplot(data = mtcars, aes(x=disp)) + geom_histogram(bins = 10, fill="blue")
ggplot(data = mtcars, aes(x=disp)) + geom_histogram(bins = 10, fill="skyblue")
ggplot(data = mtcars, aes(x=disp)) + geom_histogram(bins = 10,
fill="skyblue",
color="blue")
ggplot(data=mtcars, aes(y=disp))
ggplot(data=mtcars, aes(y=disp)) + geom_boxplot()
View(mtcars)
ggplot(data=mtcars, aes(y=disp,x=vs)) + geom_boxplot()
View(mtcars)
mtcars$vs <- factor(mtcars$vs)
ggplot(data=mtcars, aes(y=disp,x=vs)) + geom_boxplot()
colors
colors()
ggplot(data=mtcars, aes(y=disp,x=vs)) + geom_boxplot(fill=c('wheat1',"violetred4"))
ggplot(data=mtcars, aes(y=disp,x=vs,fill=vs)) + geom_boxplot()
library(ggplot2)
install.packages("insuranceData")
library(insuranceData)
data("AutoCollision")
names(AutoCollision)
ggplot(data = AutoCollision, aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point()
ggplot(data = AutoCollision, aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point() + labs(y="Claim Count", title = "Severity by Claim Count")
ggplot(data = AutoCollision, aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point() + labs(y="Claim Count", title = "Severity by Claim Count")
ggplot(data = AutoCollision, aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point() + labs(y="Claim Count", title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = AutoCollision, aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point() + labs(y="Claim Count", color="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5))
AutoCollision |> ggplot(aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point() + labs(y="Claim Count", color="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(AutoCollision, aes(x=y=Claim_Count, fill=Vehicle_Use)) +
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot()
ggplot(AutoCollision, aes(y=Claim_Count, color=Vehicle_Use)) +
geom_boxplot() + labs(y="Claim Count", color="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() + labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() + labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(pallete="Set3")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() + labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(pallete="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() + labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() + labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual") +
stat_summary(fun.y=mean, geom="point")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +  +
stat_summary(fun.y=mean, geom="point") +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +  +
stat_summary(fun=mean, geom="point") +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun=mean, geom="point") +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun=mean) +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun.y = 'mean') +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun = 'mean') +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
check_required_aesthetics()
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun = 'mean')
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun = 'mean') +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
rlang::last_error()
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use, x=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun = 'mean') +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
library(ggplot2)
library(insuranceData)
data("AutoCollision")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use, x=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun = 'mean') +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
ggplot(AutoCollision, aes(y=Claim_Count, fill=Vehicle_Use, x=Vehicle_Use)) +
geom_boxplot() +
stat_summary(fun = mean) +
labs(y="Claim Count", fill="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette ="Set3", type = "qual")
View(AutoCollision)
library(ggplot2)
library(insuranceData)
data("AutoCollision")
ggplot(data = AutoCollision, aes(x=Severity,y=Claim_Count,color=Vehicle_Use)) +
geom_point() + labs(y="Claim Count", color="Vehicle Usage",
title = "Severity by Claim Count")+
theme(plot.title = element_text(hjust = 0.5))
shiny::runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
data(faithful)
force(faithful)
View(faithful)
View(faithful)
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = 18 + 1)
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = 18 + 1)
bins
bins <- seq(min(x), max(x), by=0.5)
bins
bins <- seq(min(x), max(x), by=5)
bins
bins <- seq(min(x), max(x), by=2)
bins
data(faithful)
x    <- faithful[, 2]
bins <- seq(min(x), max(x), by=2)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
data(faithful)
x    <- faithful[, 2]
bins <- seq(min(x), max(x), by=2)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
min(x)
max(x)
bins <- seq(min(x), max(x), by=1)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
data(faithful)
x    <- faithful[, 2]
bins <- seq(min(x), max(x), by=1)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
bins <- seq(min(x), max(x),length.out = 5 + 1)
bins
seq(1,10)
seq(1,10, by=0.5)
seq(1,10,length.out=20)
min(x)
max(x)
seq(min(x), max(x),length.out = 5 + 1)
bins <- seq(min(x), max(x),length.out = 5 + 1)
bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
slider_bins <- 6
bins <- seq(min(x), max(x),length.out = slider_bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
slider_bins <- 17
bins <- seq(min(x), max(x),length.out = slider_bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/interactive_histo')
runApp('C:/Training/Academy/R Course (C-DAC)/6. Interactive Graphics/Class Examples/Histogram')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simpleCalc')
library(shiny)
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/simple_calc')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
housing <- read.csv("C:/Training/Academy/R Course (C-DAC)/Datasets/Housing.csv", stringsAsFactors = T)
View(housing)
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
length(housing)
dim(housing)
dim(housing)[1]
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
library(DT)
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
runApp('C:/Training/Academy/R Course (C-DAC)/Demo Codes/subset_data')
data()
install.packages("tensorflow")
w <- 4
y <- "S"
h <- w**3
ls()
w <- 4
y <- "S"
h <- w**3
ls()
install.packages("tidyr")
d <- c(3,5,7,8)
d
class(d)
w <- 4
class(w)
length(d)
d+3
d*2
name <- c("A","H","L","M")
age <- c(34, 78, 12, 55)
rb <- rbind(name, age)
rb
cb <- cbind(name, age)
cb
class(rb)
df <- data.frame(name, age)
View(df)
View(df)
data()
data(mtcars)
mtcars
View(mtcars)
data(mtcars)
View(mtcars)
View(mtcars)
disp
View(mtcars)
mtcars$disp
View(mtcars)
a_h <- 9
a.h <- 6
mtcars$disp
class(mtcars$disp)
View(mtcars)
mean(mtcars$disp)
sd(mtcars$disp)
summary(mtcars$disp)
shiny::runApp('C:/Training/Academy/Statistics (Python)/Demo Codes KnowIT Dec 2022/Histogram/Hist')
paste("Histogram of", num_var)
num_var <- "Price"
paste("Histogram of", num_var)
runApp('C:/Training/Academy/Statistics (Python)/Demo Codes KnowIT Dec 2022/Histogram/Hist')
shiny::runApp('C:/Training/Academy/Statistics (Python)/Demo Codes KnowIT Dec 2022/Histogram/Hist')
